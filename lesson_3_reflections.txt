When would you want to use a remote repository rather than keeping all your work local?
  
	The obvious case is when working on a project that involves multiple contributors 
	since the remote repository will allow everyone to work simultaneously and at the 
	same time allow them to include others' work.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

	That's because sometimes you make changes locally that you don't want them overidden 
	if Git automatically stayed up-to-date and for example restored a file present on the
	remote that you deleted on your local repository. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	I'm not sure if branches are really comparable with the other two, so I'll start with it.
	In my own words, branches are sections of your projects, kind of, can be created 
	both locally or on the remote repo, commits should be done to them, that's all I 
	can think of for now. Now, clones are, as their name says, they are copies of 
	your work, your entire repository/project, you can clone from local to local, from
	remote to local and from remote to remote. This last one is actually a fork in
	GitHub's jargon, when you fork a repository in GitHub, you're just cloning it under 
	your profile in GitHub's server.

What is the benefit of having a copy of the last known state of the remote stored locally?

	I think the benefit is that it makes collaborating easier, meaning, having a copy of 
	the last know state of the remote will give you an idea of what changes were made from
	other collaborators of the same project and that way it makes merging your combined
	work much easier.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	
	Now after knowing the 'worth' of Git and GitHub (I was really wondering for the longest time why 
	people were so 'hyped' about them, sorta), it may really be hard to go back. I see how using both
	of them can save a LOT of time especially when collaborating. I used to collaborate using nothing
	really, when working on school projects with fellow group members, everybody just work on their 
	allocated task and then we simply get together on a couple of nights to kind of 'merge' our works,
	and the combining process really goes something like this, one member (the most knowledgeable, usuallly)
	take the work of the other members, one at a time, asks them what they added to the initial version, 
	tries to merge their work and then move on to the next person and so on, that's about it! I really do
	see where collaborating with Git and GitHub will come in handy, so I definitely think that, once
	getting used to these tools, it's way much easier to work with them rather then doing we used to do.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	I still think that every major change needs its own branch first before being merged into the main
	program, i.e the master branch. That way collaborating is made easier, since that change being followed
	by a pull request won't be included unless approved by the parties concerned, even if it means
	more work literally, but I think it's the safest approach to maintain the integrity of the whole
	program.

**Commands covered in this lesson**
	---Git commands---
	git config --global credential.helper wincred
	git remote
	git remote add repo_name(origin) remote_url
	git remote -v
	(when git clone, it does the git remote automatically)
	git push remote_name(origin) branch_name
	git pull remote_name(origin) branch_name
	git pull origin master == | git fetch origin
	                          | git merge master origin/master
	git branch -a
	git fetch origin
	git log origin/master
	git diff origin/master master